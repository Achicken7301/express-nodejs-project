/**
 * Module dependencies.
 */

<<<<<<< HEAD
const http = require("http");
const Server = require("./server");
=======
var http = require('http');
>>>>>>> 47f5e9273634f8910f0487b373a621f39f780d31

/**
 * Invoking the library as a function delegates to attach if the first argument
 * is an `http.Server`.
 *
 * If there are no arguments or the first argument is an options object, then
 * a new Server instance is returned.
 *
 * @param {http.Server} server (if specified, will be attached to by the new Server instance)
 * @param {Object} options
 * @return {Server} engine server
 * @api public
 */

<<<<<<< HEAD
exports = module.exports = function() {
=======
exports = module.exports = function () {
>>>>>>> 47f5e9273634f8910f0487b373a621f39f780d31
  // backwards compatible use as `.attach`
  // if first argument is an http server
  if (arguments.length && arguments[0] instanceof http.Server) {
    return attach.apply(this, arguments);
  }

  // if first argument is not an http server, then just make a regular eio server
<<<<<<< HEAD
  return new Server(...arguments);
=======
  return exports.Server.apply(null, arguments);
>>>>>>> 47f5e9273634f8910f0487b373a621f39f780d31
};

/**
 * Protocol revision number.
 *
 * @api public
 */

exports.protocol = 1;

/**
 * Expose Server constructor.
 *
 * @api public
 */

<<<<<<< HEAD
exports.Server = Server;
=======
exports.Server = require('./server');
>>>>>>> 47f5e9273634f8910f0487b373a621f39f780d31

/**
 * Expose Socket constructor.
 *
 * @api public
 */

<<<<<<< HEAD
exports.Socket = require("./socket");
=======
exports.Socket = require('./socket');
>>>>>>> 47f5e9273634f8910f0487b373a621f39f780d31

/**
 * Expose Transport constructor.
 *
 * @api public
 */

<<<<<<< HEAD
exports.Transport = require("./transport");
=======
exports.Transport = require('./transport');
>>>>>>> 47f5e9273634f8910f0487b373a621f39f780d31

/**
 * Expose mutable list of available transports.
 *
 * @api public
 */

<<<<<<< HEAD
exports.transports = require("./transports");
=======
exports.transports = require('./transports');
>>>>>>> 47f5e9273634f8910f0487b373a621f39f780d31

/**
 * Exports parser.
 *
 * @api public
 */

<<<<<<< HEAD
exports.parser = require("engine.io-parser");
=======
exports.parser = require('engine.io-parser');
>>>>>>> 47f5e9273634f8910f0487b373a621f39f780d31

/**
 * Creates an http.Server exclusively used for WS upgrades.
 *
 * @param {Number} port
 * @param {Function} callback
 * @param {Object} options
 * @return {Server} websocket.io server
 * @api public
 */

exports.listen = listen;

<<<<<<< HEAD
function listen(port, options, fn) {
  if ("function" === typeof options) {
=======
function listen (port, options, fn) {
  if ('function' === typeof options) {
>>>>>>> 47f5e9273634f8910f0487b373a621f39f780d31
    fn = options;
    options = {};
  }

<<<<<<< HEAD
  const server = http.createServer(function(req, res) {
    res.writeHead(501);
    res.end("Not Implemented");
  });

  // create engine server
  const engine = exports.attach(server, options);
=======
  var server = http.createServer(function (req, res) {
    res.writeHead(501);
    res.end('Not Implemented');
  });

  // create engine server
  var engine = exports.attach(server, options);
>>>>>>> 47f5e9273634f8910f0487b373a621f39f780d31
  engine.httpServer = server;

  server.listen(port, fn);

  return engine;
}

/**
 * Captures upgrade requests for a http.Server.
 *
 * @param {http.Server} server
 * @param {Object} options
 * @return {Server} engine server
 * @api public
 */

exports.attach = attach;

<<<<<<< HEAD
function attach(server, options) {
  const engine = new Server(options);
=======
function attach (server, options) {
  var engine = new exports.Server(options);
>>>>>>> 47f5e9273634f8910f0487b373a621f39f780d31
  engine.attach(server, options);
  return engine;
}
